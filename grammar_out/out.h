//
// DO NOT MODIFY THIS FILE
//
// THIS FILE IS AUTOMATICALLY GENERATED IN ITS ENTIRETY
// ANY CHANGES MADE IN THIS FILE WILL BE OVERWRITTEN WITHOUT WARNING
// WHENEVER GLITCH IS INVOKED.
//

#ifndef OUT_H_
#define OUT_H_

#include <itch_config.h>
#include <stdint.h>
#include <string.h>
//#include <common_config.h>

#define MAX_AST_IDENTIFIER_SIZE 20
#define MAX_AST_LABEL_SIZE 20
#define MAX_AST_ACTION_SIZE 22
#define AST_NODE_COUNT 13
#define MAX_PARAM_COUNT 2

#define MAX_GRAMMAR_DEPTH 4

#define MAX_XLAT_LABEL_SIZE 22
#define XLAT_IDENT_MAP_COUNT 2
#define XLAT_LOOKUP_MAP_COUNT 1
#define XLAT_FUNC_MAP_COUNT 5
#if defined(PLATFORM_LINUX)
#elif defined(PLATFORM_ARDUINO)
#include <Arduino.h>
#else
#error "A PLATFORM_ Directive must be provided"
#endif
// Structs and String Arrays used by the parser

typedef struct SIMPLE_STRING_ARRAY_TYPE {
    // Array of strings indexed by related enum
    char text[MAX_AST_IDENTIFIER_SIZE];
} SimpleStringArray;

typedef struct AST_NODE {
    uint8_t id;
    uint8_t type;
    char label[MAX_AST_LABEL_SIZE];
    uint8_t action;
    uint8_t parent;
    uint8_t first_child;
    uint8_t next_sibling;
    char action_identifier[MAX_AST_ACTION_SIZE];
} ASTA_Node;

typedef struct XLAT_MAP {
    char label[MAX_XLAT_LABEL_SIZE];
    uint16_t xlat_id;
} XLATMap;

typedef union {
    int16_t param_int16_t;
    uint16_t param_uint16_t;
    float param_float;
    char* param_char_star;
} ParamUnion;

// %header-start content begin
#define DEAFULT_DURATION 1  // seconds
#define MAX_INPUT_LINE_SIZE 150
#define MAX_OUTPUT_LINE_SIZE 150
// %header-end content end

#define ITCH_TERM_ESC_SEQ "^^^"
#define ITCH_TERM_ESC_SEQ_SIZE 3

#define ITCH_CCC_ESC_SEQ "%%%"
#define ITCH_CCC_ESC_SEQ_SIZE 3

enum {
	CMD_ERROR = 0,
	CMD_ON,
	CMD_OFF,
	CMD_LAZY,
	CMD_PANIC,
	CMD_CRAZY,
	LAST_COMMAND,
};

#ifdef PLATFORM_ARDUINO
const SimpleStringArray led_command_strings [LAST_COMMAND] PROGMEM = {
#else
const SimpleStringArray led_command_strings [LAST_COMMAND] = {
#endif //PLATFORM_ARDUINO
	"ERROR COMMAND",
	"ON",
	"OFF",
	"Lazy",
	"PANIC",
	"crazy",
};

enum {
	SAY_ERROR = 0,
	SAY_UPPER,
	SAY_LOWER,
	LAST_SAY_HOW,
};

#ifdef PLATFORM_ARDUINO
const SimpleStringArray say_how_strings [LAST_SAY_HOW] PROGMEM = {
#else
const SimpleStringArray say_how_strings [LAST_SAY_HOW] = {
#endif //PLATFORM_ARDUINO
	"ERROR SAY HOW",
	"upper",
	"lower",
};

void SetLEDStateByNum(int16_t param1_int, uint16_t LED_COMMAND);
void SetLEDStateByName(char* LED_NAME, uint16_t LED_COMMAND);
void LEDChase(int16_t param1_int, int16_t param2_int);
void Say(char* param1_string);
void SayWith(uint16_t SAY_HOW, char* param1_string);

// id, type, label, actionable, parent, first_child, next_sibling, action_id
#ifdef PLATFORM_ARDUINO
const ASTA_Node asta [13] PROGMEM = {
#else
const ASTA_Node asta [13] = {
#endif //PLATFORM_ARDUINO
	1, 1, "LED", 0, 0, 2, 9, "",
	2, 6, "param-integer", 0, 1, 3, 4, "",
	3, 2, "led_command_strings", 1, 2, 0, 0, "SET_LED_STATE_BY_NUM",
	4, 3, "LED_NAME", 0, 1, 5, 6, "",
	5, 2, "led_command_strings", 1, 4, 0, 0, "SET_LED_STATE_BY_NAME",
	6, 1, "CHASE", 0, 1, 7, 0, "",
	7, 6, "param-integer", 0, 6, 8, 0, "",
	8, 6, "param-integer", 1, 7, 0, 0, "LED_CHASE_SPEED_DUTY",
	9, 1, "SAY", 0, 0, 10, 0, "",
	10, 13, "param-string", 1, 9, 0, 11, "SAY",
	11, 1, "WITH", 0, 9, 12, 0, "",
	12, 2, "say_how_strings", 0, 11, 13, 0, "",
	13, 13, "param-string", 1, 12, 0, 0, "SAY_WITH",
};

#ifdef PLATFORM_ARDUINO
const XLATMap ident_map [2] PROGMEM = {
#else
const XLATMap ident_map [2] = {
#endif //PLATFORM_ARDUINO
	"led_command_strings", 0,
	"say_how_strings", 1,
};

#ifdef PLATFORM_ARDUINO
const XLATMap lookup_map [1] PROGMEM = {
#else
const XLATMap lookup_map [1] = {
#endif //PLATFORM_ARDUINO
	"LED_NAME", 0,
};

#ifdef PLATFORM_ARDUINO
const XLATMap func_map [5] PROGMEM = {
#else
const XLATMap func_map [5] = {
#endif //PLATFORM_ARDUINO
	"SET_LED_STATE_BY_NUM", 0,
	"SET_LED_STATE_BY_NAME", 1,
	"LED_CHASE_SPEED_DUTY", 2,
	"SAY", 3,
	"SAY_WITH", 4,
};

uint16_t LookupIdentMap (char* key);
uint16_t LookupLookupMap (char* key);
uint16_t LookupFuncMap (char* key);
uint16_t LookupIdentifierMembers(uint16_t ident_xlat, char* lookup_string, uint8_t str_len);
uint8_t LookupLookupMembers(uint16_t ident_xlat, char* lookup_string, uint8_t str_len);
uint8_t LookupLEDName(char* lookup_string);
uint16_t CallFunction(uint8_t func_xlat, ParamUnion params[]);

#endif // OUT_H_

