//
// DO NOT MODIFY THIS FILE
//
// THIS FILE IS AUTOMATICALLY GENERATED IN ITS ENTIRETY
// ANY CHANGES MADE IN THIS FILE WILL BE OVERWRITTEN WITHOUT WARNING
// WHENEVER GLITCH IS INVOKED.
//

#include <itch_config.h>
#include <itch_strings.h>

#include <out.h>

#if defined(PLATFORM_LINUX)
#elif defined(PLATFORM_ARDUINO)
#include <Arduino.h>
#else
#error "A PLATFORM_ Directive must be provided"
#endif
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

uint16_t CallFunction(uint8_t func_xlat, ParamUnion params[]) {
	switch (func_xlat) {
		case 0:
			SetLEDStateByNum(params[0].param_int16_t, params[1].param_uint16_t);
			break;
		case 1:
			SetLEDStateByName(params[0].param_char_star, params[1].param_uint16_t);
			break;
		case 2:
			LEDChase(params[0].param_int16_t, params[1].param_int16_t);
			break;
		case 3:
			Say(params[0].param_char_star);
			break;
		case 4:
			SayWith(params[0].param_uint16_t, params[1].param_char_star);
			break;
		default:
			return PE_FUNC_XLAT_NOT_MATCHED_IN_CALLFUNCTION;
			break;
	}
	return PEME_NO_ERROR;
}

uint16_t LookupIdentMap (char* key) {
	XLATMap temp;
	uint16_t idx = 0;
	while (idx < XLAT_IDENT_MAP_COUNT) {
		#ifdef PLATFORM_ARDUINO
			memcpy_P(&temp, &ident_map[idx], sizeof(XLATMap));
		#else
			memcpy(&temp, &ident_map[idx], sizeof(XLATMap));
		#endif //PLATFORM_ARDUINO
		if(strcasecmp(temp.label, key) == 0) {
			return temp.xlat_id;
		}
		idx++;
	}
	return -1;
}

uint16_t LookupLookupMap (char* key) {
	XLATMap temp;
	uint16_t idx = 0;
	while (idx < XLAT_LOOKUP_MAP_COUNT) {
		#ifdef PLATFORM_ARDUINO
			memcpy_P(&temp, &lookup_map[idx], sizeof(XLATMap));
		#else
			memcpy(&temp, &lookup_map[idx], sizeof(XLATMap));
		#endif //PLATFORM_ARDUINO
		if(strcasecmp(temp.label, key) == 0) {
			return temp.xlat_id;
		}
		idx++;
	}
	return -1;
}

uint16_t LookupFuncMap (char* key) {
	XLATMap temp;
	uint16_t idx = 0;
	while (idx < XLAT_FUNC_MAP_COUNT) {
		#ifdef PLATFORM_ARDUINO
			memcpy_P(&temp, &func_map[idx], sizeof(XLATMap));
		#else
			memcpy(&temp, &func_map[idx], sizeof(XLATMap));
		#endif //PLATFORM_ARDUINO
		if(strcasecmp(temp.label, key) == 0) {
			return temp.xlat_id;
		}
		idx++;
	}
	return -1;
}

uint16_t LookupIdentifierMembers(uint16_t ident_xlat, char* lookup_string, uint8_t str_len) {
	SimpleStringArray temp;
	uint16_t idx = 0;
	switch(ident_xlat) {
		case 0: {
			while (idx < LAST_COMMAND) {
				#ifdef PLATFORM_ARDUINO
					memcpy_P(&temp, &led_command_strings[idx], sizeof(SimpleStringArray));
				#else
					memcpy(&temp, &led_command_strings[idx], sizeof(SimpleStringArray));
				#endif //PLATFORM_ARDUINO
				if(strnlen(temp.text, MAX_AST_IDENTIFIER_SIZE) == str_len) {
					if(strncasecmp(lookup_string, temp.text, str_len) == 0) {
						return idx;
					}
				}
				idx++;
			}
		}
			break;
		case 1: {
			while (idx < LAST_SAY_HOW) {
				#ifdef PLATFORM_ARDUINO
					memcpy_P(&temp, &say_how_strings[idx], sizeof(SimpleStringArray));
				#else
					memcpy(&temp, &say_how_strings[idx], sizeof(SimpleStringArray));
				#endif //PLATFORM_ARDUINO
				if(strnlen(temp.text, MAX_AST_IDENTIFIER_SIZE) == str_len) {
					if(strncasecmp(lookup_string, temp.text, str_len) == 0) {
						return idx;
					}
				}
				idx++;
			}
		}
			break;
		default:
		return 0;
	}
	return 0;
}

uint8_t LookupLookupMembers(uint16_t ident_xlat, char* lookup_string, uint8_t str_len) {
	char str_terminated[MAX_AST_IDENTIFIER_SIZE];
	strncpy(str_terminated, lookup_string, MAX_AST_IDENTIFIER_SIZE);
	str_terminated[((str_len < MAX_AST_IDENTIFIER_SIZE) ? str_len : MAX_AST_IDENTIFIER_SIZE)] = '\0';
	switch(ident_xlat) {
		case 0:
			return LookupLEDName(str_terminated);
			break;
		default:
		return 0;
	}
	return 0;
}

